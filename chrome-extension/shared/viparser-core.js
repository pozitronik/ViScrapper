/**
 * VIParser Core - Shared functionality for popup and side panel
 * Contains common logic used by both interfaces
 */

class VIParserCore {
  constructor() {
    this.appState = {
      backendStatus: 'checking',
      productData: null,
      productStatus: null,
      isDataValid: false
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∞–π—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–µ–Ω–¥–∏–Ω–≥–µ
   */
  async detectSite() {
    try {
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      
      if (!tab || !tab.url) {
        console.log('No tab URL available');
        return { id: 'unsupported', name: 'VIParser', supported: false };
      }
      
      console.log('Detecting site for URL:', tab.url);
      
      if (tab.url.includes('victoriassecret.com')) {
        return { id: 'victoriassecret', name: "Victoria's Secret", supported: true };
      } else if (tab.url.includes('calvinklein.us')) {
        return { id: 'calvinklein', name: 'Calvin Klein', supported: true };
      } else if (tab.url.includes('carters.com')) {
        return { id: 'carters', name: "Carter's", supported: true };
      } else {
        console.log('Unsupported site detected:', tab.url);
        return { id: 'unsupported', name: 'VIParser', supported: false };
      }
    } catch (error) {
      console.error('Error detecting site:', error);
      return { id: 'unsupported', name: 'VIParser', supported: false };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–µ–Ω–¥–∞
   */
  async checkBackendStatus() {
    try {
      const response = await new Promise((resolve) => {
        chrome.runtime.sendMessage(
          { action: 'checkBackendStatus' },
          resolve
        );
      });
      
      this.appState.backendStatus = response.status;
      return response;
    } catch (error) {
      console.error('Error checking backend status:', error);
      this.appState.backendStatus = 'unavailable';
      return { status: 'unavailable', message: '–û—à–∏–±–∫–∞' };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
   */
  async loadProductData() {
    try {
      const response = await new Promise((resolve) => {
        chrome.runtime.sendMessage(
          { action: 'getTabData' },
          resolve
        );
      });
      
      if (response.error) {
        return { error: response.error, needsRefresh: response.needsRefresh };
      }
      
      this.appState.productData = response.data;
      this.appState.isDataValid = response.isValid;
      
      return {
        data: response.data,
        isValid: response.isValid,
        warnings: response.warnings,
        siteName: response.siteName
      };
    } catch (error) {
      console.error('Error loading product data:', error);
      return { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞' };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
   */
  async checkProductStatus(data) {
    try {
      const response = await new Promise((resolve) => {
        chrome.runtime.sendMessage(
          { action: 'checkProductStatus', data: data },
          resolve
        );
      });
      
      this.appState.productStatus = response.status;
      return response;
    } catch (error) {
      console.error('Error checking product status:', error);
      return { status: 'error', message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å' };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±—ç–∫–µ–Ω–¥
   */
  async submitData(dataToSend) {
    try {
      const response = await new Promise((resolve) => {
        chrome.runtime.sendMessage(
          { action: 'sendToBackend', data: dataToSend },
          resolve
        );
      });
      
      return response;
    } catch (error) {
      console.error('Error submitting data:', error);
      return { error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö' };
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ —Ü–≤–µ—Ç–æ–º
   */
  async startColorObserver() {
    try {
      const response = await new Promise((resolve) => {
        chrome.runtime.sendMessage(
          { action: 'startColorObserver' },
          resolve
        );
      });
      
      return response;
    } catch (error) {
      console.error('Error starting color observer:', error);
      return { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Ü–≤–µ—Ç–æ–º' };
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ —Ü–≤–µ—Ç–æ–º
   */
  async stopColorObserver() {
    try {
      const response = await new Promise((resolve) => {
        chrome.runtime.sendMessage(
          { action: 'stopColorObserver' },
          resolve
        );
      });
      
      return response;
    } catch (error) {
      console.error('Error stopping color observer:', error);
      return { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Ü–≤–µ—Ç–æ–º' };
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatAvailability(value) {
    const availabilityMap = {
      'InStock': '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏',
      'OutOfStock': '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏', 
      'SoldOut': '‚ùå –†–∞—Å–ø—Ä–æ–¥–∞–Ω–æ',
      'PreOrder': '‚è∞ –ü—Ä–µ–¥–∑–∞–∫–∞–∑',
      'PreSale': '‚è∞ –ü—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–∞',
      'BackOrder': 'üì¶ –ü–æ–¥ –∑–∞–∫–∞–∑',
      'MadeToOrder': 'üî® –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫–∞–∑',
      'Discontinued': 'üö´ –°–Ω—è—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
      'InStoreOnly': 'üè™ –¢–æ–ª—å–∫–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ',
      'OnlineOnly': 'üíª –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω',
      'LimitedAvailability': '‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
      'Reserved': 'üîí –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ'
    };
    
    return availabilityMap[value] || `‚ùì ${value}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  getSelectedImages() {
    const checkboxes = document.querySelectorAll('.image-checkbox:checked');
    const selectedImages = [];
    
    checkboxes.forEach(checkbox => {
      const index = parseInt(checkbox.dataset.index);
      if (this.appState.productData && this.appState.productData.all_image_urls && this.appState.productData.all_image_urls[index]) {
        selectedImages.push(this.appState.productData.all_image_urls[index]);
      }
    });
    
    return selectedImages;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  canSubmitData() {
    return this.appState.backendStatus === 'available' && 
           this.appState.productData && 
           this.appState.isDataValid;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  getSubmitButtonText() {
    if (this.appState.backendStatus !== 'available') {
      return '–ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    } else if (!this.appState.productData) {
      return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    } else if (!this.appState.isDataValid) {
      return '–î–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã';
    } else if (this.appState.productStatus === 'existing') {
      return '–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å';
    } else {
      return '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ';
    }
  }
}

// Export for use in other modules
if (typeof window !== 'undefined') {
  window.VIParserCore = VIParserCore;
}