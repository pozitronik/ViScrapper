name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  lint-and-type-check:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run flake8 linting
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
          
      - name: Run mypy type checking
        run: |
          mypy main.py --config-file mypy.ini
          
      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .
          
  test:
    name: Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
        
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Set up test environment
        run: |
          # Create test environment file
          cp .env_ .env.test || echo "No .env_ file found, creating minimal test config"
          echo "DATABASE_URL=sqlite:///./test.db" >> .env.test
          echo "ENVIRONMENT=test" >> .env.test
          echo "LOG_LEVEL=WARNING" >> .env.test
          echo "BACKUP_ENABLED=false" >> .env.test
          
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short --maxfail=5
          
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short --maxfail=3
          
      - name: Generate coverage report
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=70
          
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          directory: backend/
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run bandit security linter
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium
          
      - name: Check for known security vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check
          
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json
            
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: backend/
          push: false
          tags: viparser-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: viparser_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install httpx pytest-asyncio
          
      - name: Set up test database
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/viparser_test
        run: |
          echo "DATABASE_URL=postgresql://postgres:testpass@localhost:5432/viparser_test" > .env.test
          echo "ENVIRONMENT=test" >> .env.test
          echo "LOG_LEVEL=WARNING" >> .env.test
          echo "BACKUP_ENABLED=false" >> .env.test
          
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/viparser_test
        run: |
          python -c "from utils.migrations import initialize_database_with_migrations; initialize_database_with_migrations()"
          
      - name: Start API server in background
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/viparser_test
        run: |
          python main.py &
          sleep 10  # Wait for server to start
          
      - name: Run API health check
        run: |
          curl -f http://localhost:8000/api/v1/health || exit 1
          
      - name: Run API integration tests
        run: |
          pytest tests/integration/ -v --tb=short -k "api" || true
          
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: backend
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust
          
      - name: Run basic performance tests
        run: |
          # Run a simple load test if locust config exists
          if [ -f "locustfile.py" ]; then
            locust --headless --users 10 --spawn-rate 2 --run-time 30s --host http://localhost:8000
          else
            echo "No locustfile.py found, skipping performance tests"
          fi
          
  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
          
      - name: Run dependency vulnerability scan
        run: |
          pip-audit --desc --format=json --output=audit-report.json || true
          pip-audit --desc
          
      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit
          path: backend/audit-report.json
          
  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, security, docker]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          if [[ "${{ needs.lint-and-type-check.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.docker.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
            exit 0
          else
            echo "❌ Some checks failed:"
            echo "  Lint & Type Check: ${{ needs.lint-and-type-check.result }}"
            echo "  Tests: ${{ needs.test.result }}"
            echo "  Security: ${{ needs.security.result }}"
            echo "  Docker: ${{ needs.docker.result }}"
            exit 1
          fi