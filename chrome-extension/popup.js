/**
 * Popup Script –¥–ª—è VIParser Chrome Extension
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º popup –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π —Å background script
 */

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appState = {
  backendStatus: 'checking',
  productData: null,
  productStatus: null,
  isDataValid: false
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è popup
document.addEventListener('DOMContentLoaded', async () => {
  console.log('VIParser popup initialized');
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞
  await setupSiteBranding();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  initializeElements();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç content script
  setupMessageListener();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–µ–Ω–¥–∞
  await checkBackendStatus();
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
  await loadProductData();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  setupEventHandlers();
});

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∞–π—Ç–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞
 */
async function setupSiteBranding() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    
    if (!tab || !tab.url) {
      console.warn('Could not get current tab URL for branding');
      return;
    }
    
    console.log('Setting up branding for URL:', tab.url);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–π—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
    const siteInfo = detectSite(tab.url);
    console.log('Detected site:', siteInfo);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å –∫ body
    document.body.className = `site-${siteInfo.id}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const titleElement = document.getElementById('appTitle');
    if (titleElement) {
      titleElement.textContent = `VIParser: ${siteInfo.name}`;
    }
    
    console.log(`Applied branding for ${siteInfo.name}`);
    
  } catch (error) {
    console.error('Error setting up site branding:', error);
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
 */
function detectSite(url) {
  if (url.includes('victoriassecret.com')) {
    return {
      id: 'victoriassecret',
      name: "Victoria's Secret"
    };
  } else if (url.includes('calvinklein.us')) {
    return {
      id: 'calvinklein', 
      name: 'Calvin Klein'
    };
  } else {
    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∞–π—Ç
    return {
      id: 'victoriassecret',
      name: 'VIParser'
    };
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç content script
 */
function setupMessageListener() {
  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log('Popup received message:', request);
    
    if (request.action === 'productChanged') {
      handleProductChangedNotification(request.reason);
    }
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –ø—Ä–æ–¥—É–∫—Ç–∞
 */
function handleProductChangedNotification(reason) {
  console.log('Product changed notification received:', reason);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–ª–æ–∫–µ —Å—Ç–∞—Ç—É—Å–∞
  updateProductStatus(null, { 
    status: 'changed', 
    message: '–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É' 
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
  const refreshBtn = document.getElementById('refreshBtn');
  const submitBtn = document.getElementById('submitBtn');
  
  refreshBtn.style.display = 'block';
  submitBtn.style.display = 'none';
  
  // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
  const previewContainer = document.getElementById('dataPreview');
  previewContainer.style.display = 'none';
  
  // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const commentContainer = document.querySelector('.comment-container');
  commentContainer.style.display = 'none';
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function initializeElements() {
  const commentInput = document.getElementById('commentInput');
  const charCount = document.getElementById('charCount');
  
  // –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  commentInput.addEventListener('input', () => {
    const count = commentInput.value.length;
    charCount.textContent = count;
    
    const counter = document.querySelector('.char-counter');
    counter.classList.toggle('warning', count > 400);
    counter.classList.toggle('error', count > 500);
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–µ–Ω–¥–∞
 */
async function checkBackendStatus() {
  updateBackendStatus('checking', '–ü—Ä–æ–≤–µ—Ä–∫–∞...');
  
  try {
    const response = await new Promise((resolve) => {
      chrome.runtime.sendMessage(
        { action: 'checkBackendStatus' },
        resolve
      );
    });
    
    if (response.status === 'available') {
      updateBackendStatus('available', '–î–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      updateBackendStatus('unavailable', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    appState.backendStatus = response.status;
  } catch (error) {
    console.error('Error checking backend status:', error);
    updateBackendStatus('unavailable', '–û—à–∏–±–∫–∞');
    appState.backendStatus = 'unavailable';
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–µ–Ω–¥–∞
 */
function updateBackendStatus(status, text) {
  const statusElement = document.getElementById('backendStatus');
  const dot = statusElement.querySelector('.status-dot');
  const textElement = statusElement.querySelector('.status-text');
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
  dot.classList.remove('available', 'unavailable', 'checking');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å
  if (status) {
    dot.classList.add(status);
  }
  
  textElement.textContent = text;
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
 */
async function loadProductData() {
  const previewContainer = document.getElementById('dataPreview');
  const productStatus = document.getElementById('productStatus');
  
  try {
    previewContainer.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>';
    productStatus.innerHTML = '<div class="loading">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...</div>';
    
    // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ background script
    const response = await new Promise((resolve) => {
      chrome.runtime.sendMessage(
        { action: 'getTabData' },
        resolve
      );
    });
    
    if (response.error) {
      // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
      previewContainer.style.display = 'none';
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–¥—É–∫—Ç–∞
      if (response.needsRefresh) {
        updateProductStatus(null, { 
          status: 'changed', 
          message: '–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É' 
        });
      } else {
        updateProductStatus(null, { 
          status: 'error', 
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' 
        });
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      const commentContainer = document.querySelector('.comment-container');
      commentContainer.style.display = 'none';
      
      return;
    }
    
    appState.productData = response.data;
    appState.isDataValid = response.isValid;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateDataPreview(response.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
    if (response.data && (response.data.sku || response.data.product_url)) {
      await checkProductStatus(response.data);
    } else {
      updateProductStatus(null, { status: 'unknown', message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞' });
    }
    
  } catch (error) {
    console.error('Error loading product data:', error);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
    previewContainer.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ
    updateProductStatus(null, { 
      status: 'error', 
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' 
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const commentContainer = document.querySelector('.comment-container');
    commentContainer.style.display = 'none';
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
 */
function updateDataPreview(data) {
  const container = document.getElementById('dataPreview');
  
  if (!data) {
    container.innerHTML = '<div class="error">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
    return;
  }
  
  const fields = [
    { key: 'name', label: '–ù–∞–∑–≤–∞–Ω–∏–µ' },
    { key: 'sku', label: 'SKU' },
    { key: 'price', label: '–¶–µ–Ω–∞', format: (value, data) => value ? `${value} ${data.currency || 'USD'}` : value },
    { key: 'availability', label: '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', format: (value) => {
      const availabilityMap = {
        'InStock': '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏',
        'OutOfStock': '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏', 
        'SoldOut': '‚ùå –†–∞—Å–ø—Ä–æ–¥–∞–Ω–æ',
        'PreOrder': '‚è∞ –ü—Ä–µ–¥–∑–∞–∫–∞–∑',
        'PreSale': '‚è∞ –ü—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–∞',
        'BackOrder': 'üì¶ –ü–æ–¥ –∑–∞–∫–∞–∑',
        'MadeToOrder': 'üî® –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫–∞–∑',
        'Discontinued': 'üö´ –°–Ω—è—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
        'InStoreOnly': 'üè™ –¢–æ–ª—å–∫–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ',
        'OnlineOnly': 'üíª –¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω',
        'LimitedAvailability': '‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
        'Reserved': 'üîí –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ'
      };
      
      return availabilityMap[value] || `‚ùì ${value}`;
    }},
    { key: 'color', label: '–¶–≤–µ—Ç' },
    { key: 'composition', label: '–°–æ—Å—Ç–∞–≤' },
    { key: 'item', label: '–ê—Ä—Ç–∏–∫—É–ª' }
  ];
  
  let html = '';
  
  fields.forEach(field => {
    const value = data[field.key];
    const hasValue = value !== undefined && value !== null && value !== '';
    
    let displayValue = hasValue ? value : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    if (hasValue && field.format) {
      displayValue = field.format(value, data);
    }
    
    html += `
      <div class="data-item">
        <div class="data-label">${field.label}:</div>
        <div class="data-value ${hasValue ? '' : 'missing'}">
          ${displayValue}
        </div>
      </div>
    `;
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (data.all_image_urls && data.all_image_urls.length > 0) {
    html += `
      <div class="data-item">
        <div class="data-label">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</div>
        <div class="data-value">
          <div class="image-selection-header">
            <div class="selected-count">–í—ã–±—Ä–∞–Ω–æ: <span id="selectedCount">0</span>/${data.all_image_urls.length}</div>
            <div class="image-selection-actions">
              <button class="image-selection-btn" id="selectAllBtn">–í—Å–µ</button>
              <button class="image-selection-btn" id="deselectAllBtn">–ù–∏—á–µ–≥–æ</button>
            </div>
          </div>
          <div class="images-preview">
            ${data.all_image_urls.map((img, index) => 
              `<div class="image-selector" data-index="${index}">
                <img src="${img}" alt="Product image" class="image-thumbnail">
                <input type="checkbox" class="image-checkbox" data-index="${index}" ${index < 4 ? 'checked' : ''}>
              </div>`
            ).join('')}
          </div>
          <div class="images-count">–í—Å–µ–≥–æ: ${data.all_image_urls.length}</div>
        </div>
      </div>
    `;
  } else {
    html += `
      <div class="data-item">
        <div class="data-label">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</div>
        <div class="data-value missing">–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
      </div>
    `;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
  if (data.available_sizes && data.available_sizes.length > 0) {
    // –ü—Ä–æ—Å—Ç—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–æ–¥–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç)
    html += `
      <div class="data-item">
        <div class="data-label">–†–∞–∑–º–µ—Ä—ã:</div>
        <div class="data-value">${data.available_sizes.join(', ')}</div>
      </div>
    `;
  } else if (data.size_combinations && data.size_combinations.combinations) {
    // –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ (–¥–≤—É—Ö—Ä–∞–∑–º–µ—Ä–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    const combinations = data.size_combinations.combinations;
    let combinationDisplay = '';
    
    if (Object.keys(combinations).length > 0) {
      const combLines = [];
      for (const [size1, size2Array] of Object.entries(combinations)) {
        combLines.push(`${size1}: ${size2Array.join(', ')}`);
      }
      combinationDisplay = combLines.join('; ');
    }
    
    html += `
      <div class="data-item">
        <div class="data-label">–†–∞–∑–º–µ—Ä—ã:</div>
        <div class="data-value">
          <small style="color: #666;">${combinationDisplay}</small>
        </div>
      </div>
    `;
  } else {
    html += `
      <div class="data-item">
        <div class="data-label">–†–∞–∑–º–µ—Ä—ã:</div>
        <div class="data-value missing">–ù–µ –Ω–∞–π–¥–µ–Ω—ã</div>
      </div>
    `;
  }
  
  container.innerHTML = html;
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  setupImageSelection();
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–µ–ª–µ–∫—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
function setupImageSelection() {
  const checkboxes = document.querySelectorAll('.image-checkbox');
  const selectAllBtn = document.getElementById('selectAllBtn');
  const deselectAllBtn = document.getElementById('deselectAllBtn');
  const imageSelectors = document.querySelectorAll('.image-selector');
  
  if (checkboxes.length === 0) {
    return; // –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', handleImageSelectionChange);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∏–∫–æ–≤ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
  imageSelectors.forEach(selector => {
    selector.addEventListener('click', (e) => {
      if (e.target.type !== 'checkbox') {
        const checkbox = selector.querySelector('.image-checkbox');
        checkbox.checked = !checkbox.checked;
        handleImageSelectionChange();
      }
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
  if (selectAllBtn) {
    selectAllBtn.addEventListener('click', selectAllImages);
  }
  
  if (deselectAllBtn) {
    deselectAllBtn.addEventListener('click', deselectAllImages);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  updateImageSelectionUI();
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function handleImageSelectionChange() {
  updateImageSelectionUI();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–µ–ª–µ–∫—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
function updateImageSelectionUI() {
  const checkboxes = document.querySelectorAll('.image-checkbox');
  const selectedCountSpan = document.getElementById('selectedCount');
  const imageSelectors = document.querySelectorAll('.image-selector');
  
  let selectedCount = 0;
  
  checkboxes.forEach((checkbox, index) => {
    const selector = imageSelectors[index];
    if (checkbox.checked) {
      selectedCount++;
      selector.classList.add('selected');
    } else {
      selector.classList.remove('selected');
    }
  });
  
  if (selectedCountSpan) {
    selectedCountSpan.textContent = selectedCount;
  }
}

/**
 * –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function selectAllImages() {
  const checkboxes = document.querySelectorAll('.image-checkbox');
  checkboxes.forEach(checkbox => {
    checkbox.checked = true;
  });
  updateImageSelectionUI();
}

/**
 * –°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
function deselectAllImages() {
  const checkboxes = document.querySelectorAll('.image-checkbox');
  checkboxes.forEach(checkbox => {
    checkbox.checked = false;
  });
  updateImageSelectionUI();
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function getSelectedImages() {
  const checkboxes = document.querySelectorAll('.image-checkbox:checked');
  const selectedImages = [];
  
  checkboxes.forEach(checkbox => {
    const index = parseInt(checkbox.dataset.index);
    if (appState.productData && appState.productData.all_image_urls && appState.productData.all_image_urls[index]) {
      selectedImages.push(appState.productData.all_image_urls[index]);
    }
  });
  
  return selectedImages;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
 */
async function checkProductStatus(data) {
  try {
    const response = await new Promise((resolve) => {
      chrome.runtime.sendMessage(
        { action: 'checkProductStatus', data: data },
        resolve
      );
    });
    
    updateProductStatus(null, response);
    appState.productStatus = response.status;
    
  } catch (error) {
    console.error('Error checking product status:', error);
    updateProductStatus(null, { status: 'error', message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å' });
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
 */
function updateProductStatus(data, statusResponse) {
  const statusCard = document.getElementById('productStatus');
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
  statusCard.classList.remove('new', 'existing', 'unavailable', 'warning');
  
  if (!statusResponse) {
    statusCard.innerHTML = `<div class="status-text">–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...</div>`;
    statusCard.classList.add('warning');
    return;
  }
  
  let statusText = '';
  let statusClass = '';
  
  switch (statusResponse.status) {
    case 'new':
      statusText = statusResponse.message || 'üÜï –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç';
      statusClass = 'new';
      break;
    case 'existing':
      statusClass = 'existing';
      
      // –î–µ–ª–∞–µ–º —Å–∞–º—É –Ω–∞–¥–ø–∏—Å—å —Å—Å—ã–ª–∫–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å URL –ø—Ä–æ–¥—É–∫—Ç–∞
      if (statusResponse.productUrl) {
        statusText = `<a href="${statusResponse.productUrl}" target="_blank" style="color: #4ade80; text-decoration: underline;">${statusResponse.message || '‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}</a>`;
      } else {
        statusText = statusResponse.message || '‚úÖ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
      }
      break;
    case 'unavailable':
      statusText = statusResponse.message || '‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      statusClass = 'unavailable';
      break;
    case 'error':
      statusText = statusResponse.message || '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å';
      statusClass = 'warning';
      break;
    case 'changed':
      statusText = statusResponse.message || 'üîÑ –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É';
      statusClass = 'warning';
      break;
    default:
      statusText = statusResponse.message || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      statusClass = 'warning';
  }
  
  statusCard.innerHTML = `<div class="status-text">${statusText}</div>`;
  statusCard.classList.add(statusClass);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
  if (statusResponse && statusResponse.status === 'changed') {
    const refreshBtn = document.getElementById('refreshBtn');
    const submitBtn = document.getElementById('submitBtn');
    
    refreshBtn.style.display = 'block';
    submitBtn.style.display = 'none';
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
    updateButtons();
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventHandlers() {
  const submitBtn = document.getElementById('submitBtn');
  const refreshBtn = document.getElementById('refreshBtn');
  
  // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
  submitBtn.addEventListener('click', async () => {
    await handleSubmit();
  });
  
  // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  refreshBtn.addEventListener('click', () => {
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
      chrome.tabs.reload(tabs[0].id);
      window.close();
    });
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
  updateButtons();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
 */
function updateButtons() {
  const submitBtn = document.getElementById('submitBtn');
  const refreshBtn = document.getElementById('refreshBtn');
  
  // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (refreshBtn.style.display !== 'none') {
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  submitBtn.style.display = 'block';
  refreshBtn.style.display = 'none';
  
  const canSubmit = appState.backendStatus === 'available' && 
                   appState.productData && 
                   appState.isDataValid;
  
  submitBtn.disabled = !canSubmit;
  
  if (!canSubmit) {
    if (appState.backendStatus !== 'available') {
      submitBtn.textContent = '–ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    } else if (!appState.productData) {
      submitBtn.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    } else if (!appState.isDataValid) {
      submitBtn.textContent = '–î–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã';
    }
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    if (appState.productStatus === 'existing') {
      submitBtn.textContent = '–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å';
    } else {
      submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ';
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
async function handleSubmit() {
  const submitBtn = document.getElementById('submitBtn');
  const commentInput = document.getElementById('commentInput');
  
  submitBtn.disabled = true;
  submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const selectedImages = getSelectedImages();
    
    const dataToSend = {
      ...appState.productData,
      comment: commentInput.value.trim(),
      // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
      all_image_urls: selectedImages,
      main_image_url: selectedImages.length > 0 ? selectedImages[0] : null
    };
    
    const response = await new Promise((resolve) => {
      chrome.runtime.sendMessage(
        { action: 'sendToBackend', data: dataToSend },
        resolve
      );
    });
    
    if (response.error) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∫–Ω–æ–ø–∫–µ
      submitBtn.textContent = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
      setTimeout(() => {
        updateButtons();
      }, 3000);
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç
      const statusCard = document.getElementById('productStatus');
      
      if (response.productUrl && response.message) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–µ–ª–µ–Ω—ã–π —Å —Å—Å—ã–ª–∫–æ–π
        statusCard.classList.remove('new', 'existing', 'unavailable', 'warning');
        statusCard.classList.add('existing');
        statusCard.innerHTML = `<div class="status-text"><a href="${response.productUrl}" target="_blank" style="color: #4ade80; text-decoration: underline;">${response.message}</a></div>`;
        
        submitBtn.textContent = '–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!';
      } else {
        submitBtn.textContent = '–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!';
      }
      
      setTimeout(() => window.close(), 2000);
    }
    
  } catch (error) {
    console.error('Error submitting data:', error);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∫–Ω–æ–ø–∫–µ
    submitBtn.textContent = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
    setTimeout(() => {
      updateButtons();
    }, 3000);
  } finally {
    submitBtn.disabled = false;
  }
}

